from discord.ext import commands, tasks
from datetime import datetime
import random
from dotenv import load_dotenv
import os
import sqlite3
import math

TRACKED_GUILD_ID = (int) (os.getenv("TRACKED_GUILD_ID"))
TRACKED_USER_ID = (int) (os.getenv("TRACKED_USER_ID"))
HOME_GUILD_ID = (int) (os.getenv("HOME_GUILD_ID"))
HOME_GUILD_CHANNEL_ID = (int) (os.getenv("HOME_GUILD_CHANNEL_ID"))
RECIEVER_ID = (int) (os.getenv("RECIEVER_ID"))
BOT_START_UP_TIME = datetime.now()

# Create or connect to database
with sqlite3.connect('activity.db') as conn:
    c = conn.cursor()

    # Create a table to store activity time (if not exists)
    c.execute('''
    CREATE TABLE IF NOT EXISTS activity_log (
        user_id TEXT,
        username TEXT,
        date TIMESTAMP,
        last_seen TIMESTAMP,
        total_seconds INTEGER DEFAULT 0
    )
    ''')

    conn.commit()

class stalker(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.presence_cache = {}
        self.DmsToggled = False
        self.ServerUpdatesToggled = False

    @commands.Cog.listener()
    async def on_message_delete(self, message):
        home_guild_main_channel = self.bot.get_channel(HOME_GUILD_CHANNEL_ID)
        timestamp = f"[{datetime.now().strftime("%Y-%m-%d %I:%M:%S %p")}]"
        await home_guild_main_channel.send(f"{timestamp} **{message.author.name}** deleted a message in {message.channel.name} in the {message.guild.name} guild: {message.content}")

    @commands.Cog.listener()
    async def on_message_edit(self, before, after):
        home_guild_main_channel = self.bot.get_channel(HOME_GUILD_CHANNEL_ID)
        timestamp = f"[{datetime.now().strftime("%Y-%m-%d %I:%M:%S %p")}]"
        await home_guild_main_channel.send(f"{timestamp} **{after.author.name}** edited a message in {after.channel.name} in the {after.guild.name} guild. It was edited from '{before.content}' to '{after.content}'")

    @commands.Cog.listener()
    async def on_presence_update(self, before, after):
        user_id = after.id
        current_status = after.status
        current_activities = set(a.name for a in after.activities if a and a.name)
        timestamp = datetime.now().strftime("%Y-%m-%d %I:%M:%S %p")
        date = datetime.now().strftime("%Y-%m-%d")
        
        # mutual_guild = self.bot.get_guild(TRACKED_GUILD_ID)
        home_guild = self.bot.get_guild(HOME_GUILD_ID)
        home_guild_main_channel = home_guild.get_channel(HOME_GUILD_CHANNEL_ID)
        tracked_user = self.bot.get_user(TRACKED_USER_ID)
        reciever = self.bot.get_user(RECIEVER_ID)

        prev_state = self.presence_cache.get(user_id, {
            "status": before.status,
            "activities": set(a.name for a in before.activities if a and a.name)
        })

        # Only log if there's a meaningful change
        status_changed = prev_state["status"] != current_status
        activity_changed = prev_state["activities"] != current_activities

        # Update cache
        self.presence_cache[user_id] = {
            "status": current_status,
            "activities": current_activities
        }

        if status_changed:
            if user_id == TRACKED_USER_ID and str(current_status) == "dnd":
                rng = random.randint(1, 99)
                if rng == 1:
                    await tracked_user.send("I hate you hehe")
                else:
                    await tracked_user.send("I love you â™¥")
            
            with sqlite3.connect('activity.db') as conn:
                c = conn.cursor()
                if str(current_status) in ("online", "dnd", "idle"):
                    c.execute("SELECT * FROM activity_log WHERE user_id = ?, date = ?", (user_id, date))
                    row = c.fetchone()
                    #if new day, row doesnt exist yet, but they may still  be online, have to add the time difference between going offline and midnight of yesterday to be accurate
                    #loop through to add screentime of current day at midnight no matter what, but dont update last seen if theyre still online until they go offline
                    if row:
                        c.execute("UPDATE activity_log SET last_seen = ? WHERE user_id = ?, date = ?", (timestamp, user_id, date))
                    else:
                        c.execute("INSERT INTO activity_log (user_id, username, date, last_seen, total_seconds) VALUES (?, ?, ?, ?, ?)", (user_id, after.name, date, timestamp, 0))
                else:
                    c.execute("SELECT * FROM activity_log WHERE user_id = ?, date = ?", (user_id , date))
                    row = c.fetchone()
                    if row: #bug fix this, as last-seen might not exist for the current day if they were online through midngiht
                        last_seen = row["last_seen"]
                        total_seconds = row["total_seconds"]
                        new_total_seconds = total_seconds + datetime.strptime(timestamp, "%Y-%m-%d %I:%M:%S %p") - (datetime.strptime(last_seen, "%Y-%m-%d %I:%M:%S %p"))
                        c.execute("UPDATE activity_log SET total_seconds = ?, last_seen = ? WHERE user_id = ?, date = ?", (new_total_seconds, timestamp, user_id, date))
                    else:
                        now = datetime.now()
                        start_of_day = datetime(now.year, now.month, now.day)
                        seconds_since_midnight = int((now - start_of_day).total_seconds())
                        c.execute("INSERT INTO activity_log (user_id, username, date, last_seen, total_seconds) VALUES (?, ?, ?, ?, ?)", (user_id, after.name, date, timestamp, seconds_since_midnight))
                conn.commit()

            print(f"[{timestamp}]: {after.name} changed status from {prev_state['status']} to {current_status}. " + ('' if activity_changed else '\n'))
            if self.DmsToggled:
                await reciever.send(f"[{timestamp}]: {after.name} changed status from {prev_state['status']} to {current_status}.")
            if self.ServerUpdatesToggled:
                await home_guild_main_channel.send(f"[{timestamp}]: {after.name} changed status from {prev_state['status']} to {current_status}.")

        if activity_changed:
            print(f"[{timestamp}]: {after.name} changed activity from {', '.join(prev_state['activities']) or 'None'} to {', '.join(current_activities) or 'None'}\n")
            if self.DmsToggled:
                await reciever.send(f"[{timestamp}]: {after.name} changed activity from {', '.join(prev_state['activities']) or 'None'} to {', '.join(current_activities) or 'None'}\n")
            if self.ServerUpdatesToggled:
                await home_guild_main_channel.send(f"[{timestamp}]: {after.name} changed activity from {', '.join(prev_state['activities']) or 'None'} to {', '.join(current_activities) or 'None'}\n")

    @tasks.loop(time=datetime.time(hour = 0, minute = 0))
    async def update_all_screentimes(self):
        today = datetime.date.today().strftime("%Y-%m-%d")
        yesterday = (datetime.date.today() - datetime.timedelta(days=1)).strftime("%Y-%m-%d")
        for user_id, user_info in self.presence_cache.items():
            if user_info["status"] != "offline":
                with sqlite3.connect('activity.db') as conn:
                    c = conn.cursor()
                    c.execute("SELECT * FROM activity_log WHERE user_id = ?, date = ?", (user_id, yesterday))
                    row = c.fetchone()
                    yesterday_total_seconds = row["total_seconds"]
                    time_to_be_added = int((datetime.now() - datetime.strptime(row["last_seen"], "%Y-%m-%d %I:%M:%S %p")).total_seconds())
                    c.execute("UPDATE activity_log SET total_seconds = ? WHERE user_id = ?, date = ?", (yesterday_total_seconds + time_to_be_added, user_id, yesterday))
                    c.execute("UPDATE activity_log SET last_seen = ? WHERE user_id = ?, date = ?", (datetime.now().strftime("%Y-%m-%d %I:%M:%S %p"), user_id, today))
                    if c.rowcount == 0:
                        c.execute("INSERT INTO activity_log (user_id, username, date, last_seen, total_seconds) VALUES (?, ?, ?, ?, ?)", (user_id, self.bot.get_user(user_id).name, today, datetime.now().strftime("%Y-%m-%d %I:%M:%S %p"), 0))
                    conn.commit()

    @commands.command
    async def botuptime(self, ctx):
        start_date = BOT_START_UP_TIME.strftime("%Y-%m-%d %H:%M:%S %p")
        total_uptime_seconds = int((datetime.now() - BOT_START_UP_TIME).total_seconds())
        uptime_hours = math.floor(total_uptime_seconds / 3600)
        uptime_minutes = math.floor(total_uptime_seconds % 3600 / 60)
        uptime_seconds = math.floor(total_uptime_seconds % 60)
        await ctx.send(f"Bot started running at [{start_date}]. So far the uptime is {uptime_hours} hours, {uptime_minutes} minutes, and {uptime_seconds} seconds.")

    @commands.command(aliases=["tdms"])
    async def toggledms(self, ctx):
        user_id = str(ctx.author.id)
        if user_id == str(RECIEVER_ID) and self.DmsToggled:
            self.DmsToggled = False
            await ctx.send("Stopped sending messages to reciever.")
        elif user_id == str(RECIEVER_ID) and not self.DmsToggled:
            self.DmsToggled = True
            await ctx.send("Started sending messages to reciever.")
        else:
            await ctx.send("You are not the reciever.")

    @commands.command(aliases=["tsus"])
    async def toggleserverupdates(self, ctx):
        guild_id = str(ctx.guild.id)
        if guild_id == str(HOME_GUILD_ID) and self.ServerUpdatesToggled:
            self.ServerUpdatesToggled = False
            await ctx.send("Stopped sending messages to home server.")
        elif guild_id == str(HOME_GUILD_ID) and not self.ServerUpdatesToggled:
            self.ServerUpdatesToggled = True
            await ctx.send("Started sending messages to home server.")
        else:
            await ctx.send("This is not the home server.")